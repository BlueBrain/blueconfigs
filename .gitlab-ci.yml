workflow:
  rules:
    # Rules taken from official docs to avoid duplicated pipelines
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'

include:
  - project: hpc/gitlab-pipelines
    file:
      - spack-build-components.gitlab-ci.yml
      - bbp-gitlab-access.yml
    ref: '$GITLAB_PIPELINES_BRANCH'

stages:
  - prepare_env
  - build
  - quick_tests
  - medium_size_tests
  - long_tests

variables:
  bb5_build_dir: "pipeline"  # Notice: this keeps build dir among jobs! no artifacts needed
  bb5_partition: prod_small
  bb5_cpus_per_task: 2
  SALLOC_ACCOUNT: proj9998  # salloc won't require `-A` param
  TEST_VERSIONS:
    value: "neocortex ncx_bare ncx_plasticity hippocampus thalamus mousify ncx_ngv"
    description: 'Which version of the package to build & test.'
  SPACK_BRANCH:
    description: 'Which branch of spack to use for the build.'
  CORENEURON_BRANCH:
    description: 'Which branch of coreneuron to use for the build.'
  NEURON_BRANCH:
    description: 'Which branch of neuron to use for the build.'
  PY_NEURODAMUS_BRANCH:
    description: 'Which branch of py-neurodamus to use for the build.'
  REPORTINGLIB_BRANCH:
    description: 'Which branch of reportinglib to use for the build.'
  LIBSONATA_REPORT_BRANCH:
    description: 'Which branch of libsonata-report to use for the build.'
  SYNAPSETOOL_BRANCH:
    description: 'Which branch of synapsetool to use for the build.'
  NEURODAMUS_CORE_BRANCH:
    description: 'Which branch of neurodamus-core to use for the build.'
  NEURODAMUS_HIPPOCAMPUS_BRANCH:
    description: 'Which branch of neurodamus-hippocampus to use for the build.'
  NEURODAMUS_MOUSIFY_BRANCH:
    description: 'Which branch of neurodamus-mousify to use for the build.'
  NEURODAMUS_NEOCORTEX_BRANCH:
    description: 'Which branch of neurodamus-neocortex to use for the build.'
  NEURODAMUS_THALAMUS_BRANCH:
    description: 'Which branch of neurodamus-thalamus to use for the build.'
  RUN_PY_TESTS:
    value: 'yes'
    description: 'Run tests with Python Neurodamus'
  RUN_HOC_TESTS:
    value: 'no'
    description: 'Run tests with HOC Neurodamus'
  DRY_RUN:
    description: 'Dont actually run sims (Mostly to test CI itself)'
  ADDITIONAL_ENV_VARS:
    description: 'Provide additional environment vars. E.g NEURODAMUS_BRANCH_MASTER=x'
  LONG_RUN:
    description: 'RUN weekly large simulation tests with Python Neuromdamus'
  SKIP_DAILY_TESTS:
    description: 'Skip daily tests (mostly for debugging long tests)'

default:
  tags:
    - bb5_map

setup_spack:
  extends: .spack_setup
  stage: prepare_env
  variables:
    # BLUECONFIGS_BRANCH=main is set as a group-level variable for hpc/sim, but
    # there is no blueconfigs package in Spack. This tells the spack_setup job
    # not to try and modify the non-existent blueconfigs package.
    SPACK_SETUP_IGNORE_PACKAGE_VARIABLES: BLUECONFIGS
  before_script:
    - !reference [.spack_setup, before_script]
    # Check commit msg as well for instructions to override spack branches
    - if [ -n "$PARENT_COMMIT_MESSAGE" ]; then
    -   echo "Using parent commit message to look for branches $PARENT_COMMIT_MESSAGE"
    -   CI_COMMIT_MESSAGE="$PARENT_COMMIT_MESSAGE"
    - fi
    - set +o pipefail
    - grep '^[[:alnum:]_]*_BRANCH=' <<< "$CI_COMMIT_MESSAGE" | while read -r l; do echo export $l ; done > commit_variables.env
    - set -o pipefail
    - cat commit_variables.env
    - . commit_variables.env

build_neurodamus:
  stage: build
  interruptible: true
  variables:
    bb5_cpus_per_task: 16
    bb5_constraint: cpu
  script:
      # Tell Git how to re-write BBP GitLab URLs to use a token instead of SSH
    - !reference [.bbp_gitlab_access, script]
    - module purge && unset MODULEPATH
    - export
    - source ./.tests_setup.sh
    # Needs to be new enough for rewriting to work.
    - module load unstable git
    - install_neurodamus

## Generic test settings

.neurodamus_test:
  variables:
    GIT_STRATEGY: none
    bb5_constraint: cpu
  script:
    - if [ "$CI_PIPELINE_SOURCE" == push ]; then DRY_RUN=1; fi
    # Workaround note: Gitlab doesnt support regex with a var in the expression
    # Therefore, instead of using rules:if, we do a DRY_RUN on Models not related
    - if [[ -n $MODEL_NAME && $MODEL_NAME != $ND_VERSION ]]; then DRY_RUN=1; fi
    # If we update "common" test all neurodamus models
    - if [[ -n $MODEL_NAME && $MODEL_NAME == "common" ]]; then unset DRY_RUN; fi
    - source ./.tests_setup.sh
    - run_test $TESTNAME "${VERSIONS[$ND_VERSION]}"


# Neurodamus Quick tests
# ~~~~~~~~~~~~~~~~~~~~~~

.nd_quick_test:
  extends: .neurodamus_test
  stage: quick_tests


q_neocortex:
  extends: .nd_quick_test
  parallel:
    matrix:
      - ND_VERSION: neocortex
        TESTNAME: [quick-v5-gaps, scx-1k-v5, quick-v6, quick-v5-multisplit]
      - ND_VERSION: neocortex
        TESTNAME: [scx-1k-v5-newparams, quick-1k-v5-nodesets, quick-scx-multi-circuit]
      - ND_VERSION: ncx_plasticity
        TESTNAME: [quick-v5-plasticity, sscx-v7-plasticity]

q_hippocampus:
  extends: .nd_quick_test
  parallel:
    matrix:
      - ND_VERSION: hippocampus
        TESTNAME: [quick-hip-projSeed2, quick-hip-multipopulation, quick-hip-delayconn]

q_thalamus:
  extends: .nd_quick_test
  parallel:
    matrix:
      - ND_VERSION: thalamus
        TESTNAME: thalamus

q_mousify:
  extends: .nd_quick_test
  parallel:
    matrix:
      - ND_VERSION: mousify
        TESTNAME: quick-mousify-sonata

q_sonata_config:
  extends: .nd_quick_test
  parallel:
    matrix:
      - ND_VERSION: ncx_plasticity
        TESTNAME: [sonataconf-quick-v5-plasticity]
      - ND_VERSION: neocortex
        TESTNAME: [sonataconf-quick-scx-multi-circuit]
      - ND_VERSION: hippocampus
        TESTNAME: [sonataconf-quick-hip-multipopulation]
      - ND_VERSION: thalamus
        TESTNAME: [sonataconf-quick-thalamus]
      - ND_VERSION: ncx_ngv
        TESTNAME: [multiscale]


# Neurodamus Medium Size tests
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.nd_medium_test:
  extends: .neurodamus_test
  stage: medium_size_tests

neocortex:
  extends: .nd_medium_test
  parallel:
    matrix:
      - ND_VERSION: neocortex
        TESTNAME: [scx-v5-gapjunctions, scx-v5-bonus-minis]
      - ND_VERSION: ncx_plasticity
        TESTNAME: [scx-v5-plasticity]

hippocampus:
  extends: .nd_medium_test
  parallel:
    matrix:
      - ND_VERSION: hippocampus
        TESTNAME: [hip-v6, hip-v6-mcr4]

mousify:
  extends: .nd_medium_test
  variables:
    ND_VERSION: mousify
    TESTNAME: mousify


# Neurodamus Long tests
# ~~~~~~~~~~~~~~~~~~~~~

# We should define two schedules:
#  - nightly (days of the week)
#  - weekely (Setting LONG_RUN=1)

.nd_long_test:
  extends: .neurodamus_test
  stage: long_tests
  script:
    - source ./.tests_setup.sh
    - source ./ci/longrun.sh
    - run_long_test $TESTNAME "${VERSIONS[$ND_VERSION]}" $SIM_TARGET
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LONG_RUN == "yes"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: manual
      allow_failure: true
    # - Otherwise dont even show the option

long_tests:
  extends: .nd_long_test
  parallel:
    matrix:
      - ND_VERSION: ncx_plasticity
        TESTNAME:  scx-v5-plasticity
        SIM_TARGET: mc0_Column
      - ND_VERSION: hippocampus
        TESTNAME: quick-hip-multipopulation
        SIM_TARGET: hippocampus_neurons:Mosaic
      - ND_VERSION: mousify
        TESTNAME: mousify
        SIM_TARGET: Layer45
      - ND_VERSION: thalamus
        TESTNAME: thalamus
        SIM_TARGET: Mosaic
